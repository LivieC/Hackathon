{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./crypto.service\";\nexport class AuthService {\n  http;\n  cryptoService;\n  apiUrl = `${environment.apiUrl}/api/auth`;\n  isAuthenticated = false;\n  constructor(http, cryptoService) {\n    this.http = http;\n    this.cryptoService = cryptoService;\n  }\n  login(username, password) {\n    const encryptedPassword = this.cryptoService.encryptPassword(password);\n    return this.http.post(`${this.apiUrl}/login`, {\n      username,\n      password: encryptedPassword\n    }).pipe(tap(() => this.isAuthenticated = true));\n  }\n  isLoggedIn() {\n    return this.isAuthenticated;\n  }\n  logout() {\n    this.isAuthenticated = false;\n  }\n  static ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CryptoService));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["tap","environment","AuthService","http","cryptoService","apiUrl","isAuthenticated","constructor","login","username","password","encryptedPassword","encryptPassword","post","pipe","isLoggedIn","logout","i0","ɵɵinject","i1","HttpClient","i2","CryptoService","factory","ɵfac","providedIn"],"sources":["E:\\citi\\JavaTraining\\Project\\TA_Hackathon\\project01\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\nimport { CryptoService } from './crypto.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = `${environment.apiUrl}/api/auth`;\r\n  private isAuthenticated = false;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private cryptoService: CryptoService\r\n  ) {}\r\n\r\n  login(username: string, password: string): Observable<any> {\r\n    const encryptedPassword = this.cryptoService.encryptPassword(password);\r\n    return this.http.post(`${this.apiUrl}/login`, { \r\n      username, \r\n      password: encryptedPassword \r\n    }).pipe(\r\n      tap(() => this.isAuthenticated = true)\r\n    );\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return this.isAuthenticated;\r\n  }\r\n\r\n  logout(): void {\r\n    this.isAuthenticated = false;\r\n  }\r\n} "],"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;AACpC,SAASC,WAAW,QAAQ,gCAAgC;;;;AAM5D,OAAM,MAAOC,WAAW;EAKZC,IAAA;EACAC,aAAA;EALFC,MAAM,GAAG,GAAGJ,WAAW,CAACI,MAAM,WAAW;EACzCC,eAAe,GAAG,KAAK;EAE/BC,YACUJ,IAAgB,EAChBC,aAA4B;IAD5B,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,aAAa,GAAbA,aAAa;EACpB;EAEHI,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,MAAMC,iBAAiB,GAAG,IAAI,CAACP,aAAa,CAACQ,eAAe,CAACF,QAAQ,CAAC;IACtE,OAAO,IAAI,CAACP,IAAI,CAACU,IAAI,CAAC,GAAG,IAAI,CAACR,MAAM,QAAQ,EAAE;MAC5CI,QAAQ;MACRC,QAAQ,EAAEC;KACX,CAAC,CAACG,IAAI,CACLd,GAAG,CAAC,MAAM,IAAI,CAACM,eAAe,GAAG,IAAI,CAAC,CACvC;EACH;EAEAS,UAAUA,CAAA;IACR,OAAO,IAAI,CAACT,eAAe;EAC7B;EAEAU,MAAMA,CAAA;IACJ,IAAI,CAACV,eAAe,GAAG,KAAK;EAC9B;;qBAzBWJ,WAAW,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,aAAA;EAAA;;WAAXpB,WAAW;IAAAqB,OAAA,EAAXrB,WAAW,CAAAsB,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}