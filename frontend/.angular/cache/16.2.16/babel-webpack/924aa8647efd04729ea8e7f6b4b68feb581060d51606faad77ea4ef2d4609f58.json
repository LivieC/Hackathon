{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  http;\n  token = null;\n  constructor(http) {\n    this.http = http;\n  }\n  login(username, password) {\n    // OpenShift OAuth token endpoint\n    const tokenUrl = `${environment.openshiftUrl}/oauth/authorize/token`;\n    const credentials = btoa(`${username}:${password}`);\n    const headers = new HttpHeaders({\n      'Authorization': `Basic ${credentials}`,\n      'Content-Type': 'application/x-www-form-urlencoded'\n    });\n    const body = 'grant_type=password&scope=user:full';\n    return this.http.post(tokenUrl, body, {\n      headers\n    }).pipe(tap(response => {\n      this.token = response.access_token;\n      // 将token发送给后端\n      return this.sendTokenToBackend(this.token);\n    }));\n  }\n  sendTokenToBackend(token) {\n    return this.http.post(`${environment.apiUrl}/api/auth/token`, {\n      token\n    });\n  }\n  getToken() {\n    return this.token;\n  }\n  logout() {\n    this.token = null;\n  }\n  isLoggedIn() {\n    return this.token !== null;\n  }\n  static ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","tap","environment","AuthService","http","token","constructor","login","username","password","tokenUrl","openshiftUrl","credentials","btoa","headers","body","post","pipe","response","access_token","sendTokenToBackend","apiUrl","getToken","logout","isLoggedIn","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["E:\\citi\\JavaTraining\\Project\\TA_Hackathon\\project01\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private token: string | null = null;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  login(username: string, password: string): Observable<any> {\r\n    // OpenShift OAuth token endpoint\r\n    const tokenUrl = `${environment.openshiftUrl}/oauth/authorize/token`;\r\n    const credentials = btoa(`${username}:${password}`);\r\n    \r\n    const headers = new HttpHeaders({\r\n      'Authorization': `Basic ${credentials}`,\r\n      'Content-Type': 'application/x-www-form-urlencoded'\r\n    });\r\n\r\n    const body = 'grant_type=password&scope=user:full';\r\n\r\n    return this.http.post(tokenUrl, body, { headers }).pipe(\r\n      tap((response: any) => {\r\n        this.token = response.access_token;\r\n        // 将token发送给后端\r\n        return this.sendTokenToBackend(this.token);\r\n      })\r\n    );\r\n  }\r\n\r\n  private sendTokenToBackend(token: string): Observable<any> {\r\n    return this.http.post(`${environment.apiUrl}/api/auth/token`, { token });\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return this.token;\r\n  }\r\n\r\n  logout(): void {\r\n    this.token = null;\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return this.token !== null;\r\n  }\r\n} "],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,GAAG,QAAQ,gBAAgB;AACpC,SAASC,WAAW,QAAQ,gCAAgC;;;AAK5D,OAAM,MAAOC,WAAW;EAGFC,IAAA;EAFZC,KAAK,GAAkB,IAAI;EAEnCC,YAAoBF,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEvCG,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC;IACA,MAAMC,QAAQ,GAAG,GAAGR,WAAW,CAACS,YAAY,wBAAwB;IACpE,MAAMC,WAAW,GAAGC,IAAI,CAAC,GAAGL,QAAQ,IAAIC,QAAQ,EAAE,CAAC;IAEnD,MAAMK,OAAO,GAAG,IAAId,WAAW,CAAC;MAC9B,eAAe,EAAE,SAASY,WAAW,EAAE;MACvC,cAAc,EAAE;KACjB,CAAC;IAEF,MAAMG,IAAI,GAAG,qCAAqC;IAElD,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAACN,QAAQ,EAAEK,IAAI,EAAE;MAAED;IAAO,CAAE,CAAC,CAACG,IAAI,CACrDhB,GAAG,CAAEiB,QAAa,IAAI;MACpB,IAAI,CAACb,KAAK,GAAGa,QAAQ,CAACC,YAAY;MAClC;MACA,OAAO,IAAI,CAACC,kBAAkB,CAAC,IAAI,CAACf,KAAK,CAAC;IAC5C,CAAC,CAAC,CACH;EACH;EAEQe,kBAAkBA,CAACf,KAAa;IACtC,OAAO,IAAI,CAACD,IAAI,CAACY,IAAI,CAAC,GAAGd,WAAW,CAACmB,MAAM,iBAAiB,EAAE;MAAEhB;IAAK,CAAE,CAAC;EAC1E;EAEAiB,QAAQA,CAAA;IACN,OAAO,IAAI,CAACjB,KAAK;EACnB;EAEAkB,MAAMA,CAAA;IACJ,IAAI,CAAClB,KAAK,GAAG,IAAI;EACnB;EAEAmB,UAAUA,CAAA;IACR,OAAO,IAAI,CAACnB,KAAK,KAAK,IAAI;EAC5B;;qBAxCWF,WAAW,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;;WAAXzB,WAAW;IAAA0B,OAAA,EAAX1B,WAAW,CAAA2B,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}