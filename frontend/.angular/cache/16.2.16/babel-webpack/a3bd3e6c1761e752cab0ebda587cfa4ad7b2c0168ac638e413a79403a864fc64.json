{"ast":null,"code":"import * as CryptoJS from 'crypto-js';\nimport * as i0 from \"@angular/core\";\nexport class CryptoService {\n  salt = 'openshift-monitor-salt'; // 加盐增加安全性\n  encryptPassword(password) {\n    // 将密码和盐值组合\n    const saltedPassword = password + this.salt;\n    // 使用 SHA-256 加密\n    return CryptoJS.SHA256(saltedPassword).toString();\n  }\n  static ɵfac = function CryptoService_Factory(t) {\n    return new (t || CryptoService)();\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CryptoService,\n    factory: CryptoService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["CryptoJS","CryptoService","salt","encryptPassword","password","saltedPassword","SHA256","toString","factory","ɵfac","providedIn"],"sources":["E:\\citi\\JavaTraining\\Project\\TA_Hackathon\\project01\\frontend\\src\\app\\services\\crypto.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport * as CryptoJS from 'crypto-js';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CryptoService {\r\n  private readonly salt = 'openshift-monitor-salt'; // 加盐增加安全性\r\n\r\n  encryptPassword(password: string): string {\r\n    // 将密码和盐值组合\r\n    const saltedPassword = password + this.salt;\r\n    // 使用 SHA-256 加密\r\n    return CryptoJS.SHA256(saltedPassword).toString();\r\n  }\r\n} "],"mappings":"AACA,OAAO,KAAKA,QAAQ,MAAM,WAAW;;AAKrC,OAAM,MAAOC,aAAa;EACPC,IAAI,GAAG,wBAAwB,CAAC,CAAC;EAElDC,eAAeA,CAACC,QAAgB;IAC9B;IACA,MAAMC,cAAc,GAAGD,QAAQ,GAAG,IAAI,CAACF,IAAI;IAC3C;IACA,OAAOF,QAAQ,CAACM,MAAM,CAACD,cAAc,CAAC,CAACE,QAAQ,EAAE;EACnD;;qBARWN,aAAa;EAAA;;WAAbA,aAAa;IAAAO,OAAA,EAAbP,aAAa,CAAAQ,IAAA;IAAAC,UAAA,EAFZ;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}